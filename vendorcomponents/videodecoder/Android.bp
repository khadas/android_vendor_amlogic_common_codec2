// *** THIS PACKAGE HAS SPECIAL LICENSING CONDITIONS.  PLEASE
//     CONSULT THE OWNERS AND opensource-licensing@google.com BEFORE
//     DEPENDING ON IT IN YOUR PROJECT. ***
package {
    default_applicable_licenses: ["vendor_amlogic_common_license"],
}

cc_library_shared {
    name: "libcodec2_aml_video_decoder",
    defaults: [
        "libchrome-defaults",
        "libcodec2-impl-defaults",
    ],
    vendor: true,

    srcs: [
        "amuvm.cpp",
        "C2VDAComponent.cpp",
        "MediaHalWraper/VideoDecWraper.cpp",
        "MediaHalWraper/VideoTunnelRendererWraper.cpp",
        "MediaHalWraper/TunerPassthroughWrapper.cpp",
        "utils/C2VDAInterfaceImpl.cpp",
        "utils/C2VDAMetaDataUtil.cpp",
        "utils/C2VDABlockPoolUtil.cpp",
        "utils/C2VDATunnelModeHelper.cpp",
    ],

    local_include_dirs: [
        "include",
        "MediaHalWraper/include",
    ],

    shared_libs: [
        "android.hardware.graphics.allocator@2.0",
        "android.hardware.graphics.bufferqueue@2.0",
        "android.hardware.graphics.mapper@2.0",
        "android.hardware.media.bufferpool@2.0",
        "libbase",
        "libbinder",
        "liblog",
        "libstagefright_bufferqueue_helper",
        "libsfplugin_ccodec_utils",
        "libcodec2_simple_component",
        "libstagefright_foundation",
        "libstagefright_bufferpool@2.0",
        "libutils",
        "libcutils",
        "libcodec2",
        "libcodec2_vndk",
        "libui",
        "libutilscallstack",
        "libchrome",
        "libevent",
        "libvendor_c2componentstore",
        "libamgralloc_ext",
    ],

    header_libs: [
        "media_plugin_headers",
        "libcodec2_headers",
        "libcodec2_internal",
        "libstagefright_headers",
        "libnativewindow_headers",
        "libnativebase_headers",
        "libmediahal_headers",
        "libvendor_c2componentstore_headers",
        "libvendor_component_headers"
    ],

    // -Wno-unused-parameter is needed for libchrome/base codes
    cflags: [
        "-Werror",
        "-Wall",
        "-Wno-unused-parameter",
    ] + [
        "-Wno-unused-lambda-capture",
        "-Wno-unknown-warning-option",
    ],
    clang: true,
    sanitize: {
        misc_undefined: [
            "unsigned-integer-overflow",
            "signed-integer-overflow",
        ],
    },

    ldflags: ["-Wl,-Bsymbolic"],

}
